// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// --dev
// datasource db {
//   provider = "sqlite"
//   url      = env("DATABASE_URL")
// }

// --production
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            Int        @id @default(autoincrement())
  username      String
  email         String?    @unique
  password      String?
  phone         String     @unique
  avatar        String?
  address       String?
  postaddress   String?
  detailaddress String?
  created_at    DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  SMSToken      SMSToken[]
  Product       Product[]
  Cart          Cart[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@index([userId])
}

model Product {
  id            Int      @id @default(autoincrement())
  title         String
  price         Float
  deliver_price Float    @default(0)
  photo         String?
  description   String
  category      String
  discount      String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  // slideimages slideImage[]

  productoption productOption[]
  cart          Cart[]

  productPicture   productPicture? @relation(fields: [productPictureId], references: [id])
  productPictureId Int?

  @@index([userId])
  @@index([productPictureId])
}

model productOption {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity      Int
  color         String?
  plusdiscount  Int
  plusPrice     Int      @default(0)
  deliver_price Float    @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  cart          Cart[]

  @@index([productId])
}

model productPicture {
  id          Int          @id @default(autoincrement())
  photo       String
  // product     Product      @relation(fields: [productId], references: [id])
  // productId   Int
  category    String
  slideimages slideImage[]
  Product     Product[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model slideImage {
  id               Int             @id @default(autoincrement())
  src              String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  productPicture   productPicture? @relation(fields: [productPictureId], references: [id], onDelete: Cascade)
  productPictureId Int?

  @@index([productPictureId])
}

model Cart {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  productOption   productOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)
  productOptionId Int

  quantity  Int
  orderstat String?
  orderId   String?

  name    String?
  phone   String?
  address String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([productOptionId])
}
